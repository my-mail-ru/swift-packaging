#!/usr/bin/perl

use strict;
use warnings;
use JSON::XS;
use Getopt::Long;

my ($spec_file) = glob('*.spec');

GetOptions(
	'C|chdir=s' => sub { chdir $_[1] },
	'spec=s'    => \$spec_file,
);

my $tools_version = `swift package tools-version`;
chomp $tools_version;
$tools_version =~ s/(?:\.0+)+$//;
my $major = $tools_version =~ /^(\d+)/ ? $1 : 3;
my $requirement_key = $major >= 4 ? 'requirement' : 'version';

my $package = do {
	my $json = `swift package dump-package`;
	$json =~ s/^.*?(?=\{)//s;
	decode_json($json);
};
my $spec = do {
	open my $f, '<', $spec_file or die "Failed to open spec file '$spec_file': $!";
	local $/ = undef;
	<$f>;
};

my ($command) = @ARGV;
if ($command eq 'check') {
	exit(check() ? 0 : 1);
} elsif ($command eq 'update') {
	exit(update() ? 0 : 1);
} else {
	die "Unknown command: $command\n";
}

sub check {
	my $ok = 1;
	if ($spec =~ /^\s*BuildRequires:\s*swift(?:\s*>=\s*([\d\.]+))?\s*$/m) {
		my $spec_ver = $1;
		unless (ver_eq($spec_ver, $tools_version)) {
			print "Invalid version\n-\tBuildRequires: swift >= $spec_ver\n+\tBuildRequires: swift >= $tools_version\n";
			$ok = 0;
		}
	} else {
		print "Missed dependency:\n+\tBuildRequires: swift >= $tools_version\n";
		$ok = 0;
	}
	my %spec_req;
	while ($spec =~ /BuildRequires:\s*swiftpm\(([^)]+)\)(?:\s*>=\s*([\d\.]+))?/g) {
		$spec_req{$1} = $2;
	}
	my %package_req = map { $_->{url} => $_->{$requirement_key}->{lowerBound} } @{$package->{dependencies}};
	my %urls = map { $_ => 1 } keys %spec_req, keys %package_req;
	foreach my $url (sort keys %urls) {
		if (!exists $spec_req{$url}) {
			print "Missed dependency:\n+\t" . build_requires($url, $package_req{$url});
			$ok = 0;
		} elsif (!exists $package_req{$url}) {
			print "Redundant dependency:\n-\t" . build_requires($url, $spec_req{$url});
			$ok = 0;
		} elsif (!ver_eq($spec_req{$url}, $package_req{$url})) {
			my $old = build_requires($url, $spec_req{$url});
			my $new = build_requires($url, $package_req{$url});
			print "Invalid version:\n-\t$old+\t$new";
			$ok = 0;
		}
	}
	return $ok;
}

sub update {
	$spec =~ s/^([ \t]*BuildRequires:\s*swift(?:\s*>=\s*([\d\.]+))?)$/
		my ($orig, $version) = ($1, $2);
		ver_eq($tools_version, $version) ? $orig : "BuildRequires: swift >= $tools_version"
	/me;
	my %package_req = map { $_->{url} => $_->{$requirement_key}->{lowerBound} } @{$package->{dependencies}};
	$spec =~ s/^(\s*BuildRequires:\s*swiftpm\(([^)]+)\)(?:\s*>=\s*([\d\.]+))?[^\n]*\n)/
		my ($orig, $url, $version) = ($1, $2, $3);
		!defined $package_req{$url} ? ""
			: ver_eq($package_req{$url}, $version) ? $orig
			: build_requires($url, $package_req{$url});
	/mge;
	1 while $spec =~ /^\s*BuildRequires:.*\n/mg;
	my $here = $+[0] or die "Spec file does not contain any BuildRequires\n";
	substr $spec, $here, 0, "BuildRequires: swift >= $tools_version\n" unless $spec =~ /BuildRequires: swift\s/;
	foreach my $url (reverse sort keys %package_req) {
		unless ($spec =~ /BuildRequires:\s*swiftpm\(\Q$url\E\)/) {
			substr $spec, $here, 0, build_requires($url, $package_req{$url});
		}
	}
	open my $f, '>', $spec_file or die "Failed to open spec file '$spec_file' for writting: $!";
	print $f $spec;
	close $f;
	return 1;
}

sub ver_eq {
	my ($v1, $v2) = @_;
	$v1 = 0 unless defined $v1;
	$v2 = 0 unless defined $v2;
	$v1 =~ s/(?:\.0+)+$//;
	$v2 =~ s/(?:\.0+)+$//;
	return $v1 eq $v2;
}

sub build_requires {
	my ($url, $version) = @_;
	my $vstr = ver_eq($version, 0) ? "" : " >= $version";
	return "BuildRequires: swiftpm($url)$vstr\n";
}
